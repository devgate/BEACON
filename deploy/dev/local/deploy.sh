#!/bin/bash

# BEACON Local Development Deployment Script
# This script deploys both frontend and backend services using Docker Compose

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../../.." && pwd )"

echo -e "${GREEN}======================================${NC}"
echo -e "${GREEN}  BEACON Local Deployment Script${NC}"
echo -e "${GREEN}======================================${NC}"

# Function to check if Docker is running
check_docker() {
    echo -e "${YELLOW}Checking Docker status...${NC}"
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}Docker is not running. Please start Docker and try again.${NC}"
        exit 1
    fi
    echo -e "${GREEN}✓ Docker is running${NC}"
}

# Function to check if Docker Compose is installed
check_docker_compose() {
    echo -e "${YELLOW}Checking Docker Compose...${NC}"
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null 2>&1; then
        echo -e "${RED}Docker Compose is not installed. Please install it and try again.${NC}"
        exit 1
    fi
    echo -e "${GREEN}✓ Docker Compose is available${NC}"
}

# Function to check AWS credentials and OpenAI API key
check_credentials() {
    echo -e "${YELLOW}Checking credentials...${NC}"
    
    local aws_access_key=""
    local aws_secret_key=""
    local aws_region="ap-northeast-2"
    local openai_api_key=""
    
    # Try to get credentials from AWS CLI
    if command -v aws &> /dev/null; then
        aws_access_key=$(aws configure get aws_access_key_id 2>/dev/null || echo "")
        aws_secret_key=$(aws configure get aws_secret_access_key 2>/dev/null || echo "")
        local aws_cli_region=$(aws configure get region 2>/dev/null || echo "")
        if [ ! -z "$aws_cli_region" ]; then
            aws_region="$aws_cli_region"
        fi
    fi
    
    # Try to get from environment variables
    if [ -z "$aws_access_key" ] && [ ! -z "$AWS_ACCESS_KEY_ID" ]; then
        aws_access_key="$AWS_ACCESS_KEY_ID"
    fi
    
    if [ -z "$aws_secret_key" ] && [ ! -z "$AWS_SECRET_ACCESS_KEY" ]; then
        aws_secret_key="$AWS_SECRET_ACCESS_KEY"
    fi
    
    # Check for OpenAI API key
    if [ ! -z "$OPENAI_API_KEY" ]; then
        openai_api_key="$OPENAI_API_KEY"
    fi
    
    # If credentials are not found, prompt user
    if [ -z "$aws_access_key" ] || [ -z "$aws_secret_key" ]; then
        echo -e "${YELLOW}AWS credentials not found. Please provide them:${NC}"
        echo -e "${YELLOW}Required permissions: AmazonBedrockFullAccess, DynamoDBFullAccess${NC}"
        echo ""
        
        while [ -z "$aws_access_key" ]; do
            read -p "Enter AWS Access Key ID: " aws_access_key
        done
        
        while [ -z "$aws_secret_key" ]; do
            read -s -p "Enter AWS Secret Access Key: " aws_secret_key
            echo
        done
        
        echo -e "${GREEN}✓ AWS credentials provided${NC}"
    else
        echo -e "${GREEN}✓ AWS credentials found${NC}"
    fi
    
    # Prompt for OpenAI API key if not found
    if [ -z "$openai_api_key" ]; then
        echo -e "${YELLOW}OpenAI API key not found. This is optional but required for Vision Analysis.${NC}"
        read -s -p "Enter OpenAI API Key (optional, press Enter to skip): " openai_api_key
        echo
        if [ ! -z "$openai_api_key" ]; then
            echo -e "${GREEN}✓ OpenAI API key provided${NC}"
        else
            echo -e "${YELLOW}⚠ OpenAI API key skipped (Vision Analysis will be disabled)${NC}"
        fi
    else
        echo -e "${GREEN}✓ OpenAI API key found${NC}"
    fi
    
    # Export for use in create_env_file function
    export DETECTED_AWS_ACCESS_KEY="$aws_access_key"
    export DETECTED_AWS_SECRET_KEY="$aws_secret_key"
    export DETECTED_AWS_REGION="$aws_region"
    export DETECTED_OPENAI_API_KEY="$openai_api_key"
}

# Function to create .env file with AWS credentials
setup_env_file() {
    echo -e "${YELLOW}Setting up environment file...${NC}"
    
    # Always create/update .env file with detected credentials
    cat > "$SCRIPT_DIR/.env" << EOF
# BEACON Local Development Environment Variables
# Auto-generated by deploy.sh

# Project Configuration
COMPOSE_PROJECT_NAME=beacon-local

# Frontend Configuration
FRONTEND_PORT=3000
FRONTEND_HOST=0.0.0.0

# Backend Configuration (Flask)
BACKEND_PORT=5000
BACKEND_HOST=0.0.0.0

# AWS Bedrock Configuration
BEDROCK_REGION=${DETECTED_AWS_REGION}
DYNAMODB_VECTORS_TABLE=dev-beacon-vectors
DYNAMODB_SESSIONS_TABLE=dev-beacon-sessions
DYNAMODB_USAGE_TABLE=dev-beacon-usage

# AWS Credentials (Auto-detected)
AWS_ACCESS_KEY_ID=${DETECTED_AWS_ACCESS_KEY}
AWS_SECRET_ACCESS_KEY=${DETECTED_AWS_SECRET_KEY}

# OpenAI API Configuration (Optional)
OPENAI_API_KEY=${DETECTED_OPENAI_API_KEY}

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=1

# File Upload Configuration
MAX_CONTENT_LENGTH=16MB
UPLOAD_FOLDER=uploads

# Development Tools
ENABLE_CORS=true
ENABLE_LOGGING=true
EOF
    
    echo -e "${GREEN}✓ .env file created with AWS credentials${NC}"
}

# Function to verify AWS connection
verify_aws_connection() {
    echo -e "${YELLOW}Verifying AWS connection...${NC}"
    
    # Test AWS credentials by trying to list Bedrock models
    if command -v aws &> /dev/null; then
        export AWS_ACCESS_KEY_ID="$DETECTED_AWS_ACCESS_KEY"
        export AWS_SECRET_ACCESS_KEY="$DETECTED_AWS_SECRET_KEY"
        export AWS_DEFAULT_REGION="$DETECTED_AWS_REGION"
        
        if aws bedrock list-foundation-models --region "$DETECTED_AWS_REGION" &> /dev/null; then
            echo -e "${GREEN}✓ AWS Bedrock connection verified${NC}"
        else
            echo -e "${YELLOW}⚠ Warning: Could not verify Bedrock access. Continuing anyway...${NC}"
        fi
        
        if aws dynamodb list-tables --region "$DETECTED_AWS_REGION" &> /dev/null; then
            echo -e "${GREEN}✓ AWS DynamoDB connection verified${NC}"
        else
            echo -e "${YELLOW}⚠ Warning: Could not verify DynamoDB access. Continuing anyway...${NC}"
        fi
    else
        echo -e "${YELLOW}⚠ AWS CLI not installed. Skipping connection verification.${NC}"
    fi
}

# Function to build Docker images
build_images() {
    echo -e "${YELLOW}Building Docker images...${NC}"
    cd "$SCRIPT_DIR"
    
    if docker compose build --no-cache; then
        echo -e "${GREEN}✓ Docker images built successfully${NC}"
    else
        echo -e "${RED}Failed to build Docker images${NC}"
        exit 1
    fi
}

# Function to start services
start_services() {
    echo -e "${YELLOW}Starting services...${NC}"
    cd "$SCRIPT_DIR"
    
    if docker compose up -d; then
        echo -e "${GREEN}✓ Services started successfully${NC}"
    else
        echo -e "${RED}Failed to start services${NC}"
        exit 1
    fi
}

# Function to stop services
stop_services() {
    echo -e "${YELLOW}Stopping services...${NC}"
    cd "$SCRIPT_DIR"
    
    if docker compose down; then
        echo -e "${GREEN}✓ Services stopped successfully${NC}"
    else
        echo -e "${RED}Failed to stop services${NC}"
        exit 1
    fi
}

# Function to view logs
view_logs() {
    echo -e "${YELLOW}Viewing logs...${NC}"
    cd "$SCRIPT_DIR"
    docker compose logs -f
}

# Function to restart services
restart_services() {
    stop_services
    start_services
}

# Function to clean up everything
cleanup() {
    echo -e "${YELLOW}Cleaning up...${NC}"
    cd "$SCRIPT_DIR"
    
    docker compose down -v --remove-orphans
    docker system prune -f
    echo -e "${GREEN}✓ Cleanup completed${NC}"
}

# Function to show service status
show_status() {
    echo -e "${YELLOW}Service Status:${NC}"
    cd "$SCRIPT_DIR"
    docker compose ps
}

# Main script logic
main() {
    case "${1:-}" in
        start)
            check_docker
            check_docker_compose
            check_credentials
            setup_env_file
            verify_aws_connection
            start_services
            show_status
            echo -e "${GREEN}========================================${NC}"
            echo -e "${GREEN}Services are running!${NC}"
            echo -e "${GREEN}Frontend: http://localhost:3000${NC}"
            echo -e "${GREEN}Backend:  http://localhost:5000${NC}"
            echo -e "${GREEN}Health:   http://localhost:3000/health${NC}"
            echo -e "${GREEN}========================================${NC}"
            ;;
        stop)
            stop_services
            ;;
        restart)
            restart_services
            show_status
            ;;
        build)
            check_docker
            check_docker_compose
            check_credentials
            setup_env_file
            build_images
            ;;
        rebuild)
            check_docker
            check_docker_compose
            check_credentials
            setup_env_file
            verify_aws_connection
            build_images
            restart_services
            show_status
            ;;
        logs)
            view_logs
            ;;
        status)
            show_status
            ;;
        clean)
            cleanup
            ;;
        setup)
            echo -e "${GREEN}========================================${NC}"
            echo -e "${GREEN}  BEACON Environment Setup${NC}"
            echo -e "${GREEN}========================================${NC}"
            check_credentials
            setup_env_file
            verify_aws_connection
            echo -e "${GREEN}✓ Setup completed! Run './deploy.sh start' to begin.${NC}"
            ;;
        *)
            echo "Usage: $0 {start|stop|restart|build|rebuild|logs|status|clean|setup}"
            echo ""
            echo "Commands:"
            echo "  start    - Check AWS credentials and start all services"
            echo "  stop     - Stop all services"
            echo "  restart  - Restart all services"
            echo "  build    - Build Docker images with AWS setup"
            echo "  rebuild  - Full rebuild with AWS setup and restart services"
            echo "  logs     - View service logs"
            echo "  status   - Show service status"
            echo "  clean    - Stop services and clean up volumes"
            echo "  setup    - Setup AWS credentials and environment only"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"